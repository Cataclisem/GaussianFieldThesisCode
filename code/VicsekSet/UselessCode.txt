def pointsAndNeighboursIterative(self, points: list, initDict: dict = None, n: int = None, init_length: int = None) -> tuple[dict, list]: # type: ignore
        if n == None:
            n = self.n
        if init_length == None:
            init_length = 3
        
        if initDict == None:
            initDict = self.pointsAndNeighbours(n = 0)

        endPoints = self.generateEndPoints(n=0, init_length=max([int(tuple(x)[1]) for lists in points for x in lists]))
        endPointsSet = set(tuple(x) for x in endPoints)

        vicsekSet = self.findPointsForLineCollection(n=n, points=points, endPoints=endPoints, init_length=init_length)

        pointsSet = {tuple(x) for lists in points for x in lists} | {tuple((x[0] + x[1]) // 2) for x in points}

        allPoints = {tuple(x) for lists in vicsekSet for x in lists if tuple(x) not in pointsSet} | set([tuple((x[0] + x[1]) // 2) for x in vicsekSet if (tuple(x[0]) and tuple(x[1])) not in pointsSet]) 
        allPointsList = list(allPoints)

        maximalValInDict = max(int(initDict[x]["name"][1:]) for x in initDict.keys()) + 1
        endPointKeys, endPointsPos = zip(*set((x, initDict[x]["pos"]) for x in initDict.keys() if initDict[x]["pos"] in endPointsSet))
        for i in range(len(allPoints)):
            neighbours =set()
            for j in [(0, init_length), (0, -init_length), (init_length, 0), (-init_length, 0)]:
                potentialNeighbour = tuple(np.add(allPointsList[i], j))
                if  potentialNeighbour in allPoints:
                    neighbours.add(potentialNeighbour)
                if potentialNeighbour in initDict.keys():
                    initDict[potentialNeighbour]["neighbours"].add(tuple(allPointsList[i]))
                
            initDict[allPointsList[i]] = {"pos" : allPointsList[i], "name": f"x{i+maximalValInDict}", "neighbours" : neighbours}

        for x in initDict:
            print(f"initDict: {x}: {initDict[x]}")
        return initDict, vicsekSet + points



 def generateEndPoints(self, n: int, init_length: int) -> list:
        return [np.array([-pow(init_length, n+1), 0]), np.array([pow(init_length, n+1), 0]), np.array([0, pow(init_length, n+1)]), np.array([0,-pow(init_length, n+1)])]

    def harmonicExtension(self,x: tuple, m: int, n: int= None):

        assert m < n, "m should be less than n"

        initalDict, initalPoints = self.pointsAndNeighboursIterative(n = m, points=self.findPointsForLineCollection(n=0))
        pointsToSave = set(initalDict.keys())

        for y in initalDict:
            initalDict[y]["funcVal"] = 0
            if y == x:
                initalDict[y]["funcVal"] = 1
        

        for i in range(n-m):
            combined, initalPoints = self.pointsAndNeighboursIterative(initDict=initalDict, points=initalPoints, n = 1)
            for y in combined:
                for a in combined[y]["neighbours"]:
                    if a in pointsToSave:
                        x0 = combined[a]["funcVal"]
                        for b in combined[a]["neighbours"]:
                            if combined[b]["pos"] in pointsToSave:
                                x1 = combined[b]["funcVal"]

                combined[y]["funcVal"] = (2/3) * x0 + (1/3) * x1

            pointsToSave = set(combined[y]["pos"] for y in combined)
            initalDict = combined
        
        return combined



    def pointsAndNeighboursOlder(self, n: int = None, init_length: int = None):
        """A method for getting a dictionary of all the points and neigbors in the Vicsek set. The neighbours are found by calculating all the potential neighbors and checking if they are a point in the Vicsek set. The naming of the points is "random", since the order of the points are decided by the order that they are in the unordered set. This could probably run faster if we had a good naming convention for the points.
        
        Args
        ----
            n : int
                recursion depth
            init_length : int
                Length of the line pieces between any two points
        
        Returns
        -------
            dictionary
                a dictionary of all points who are each a dictionary containing their position and neighbours  
        """

        # Setup if None is given as argument
        if n == None:
            n = self.n        
        if init_length == None:
            init_length = 3

        # Find all the points of the Vicsek set and turn them into a set, such we can do fast lookup.
        vicsekSet = self.findPointsForLineCollection(n = n, init_length= init_length)
        allPoints =  {tuple(x) for lists in vicsekSet for x in lists} | set([(0, 0)] + [tuple((x[0] + x[1]) // 2) for x in vicsekSet]) 
        allPointsList = list(allPoints) # Makes a list so we can iterate over points
        allPointsDict = {} # Initialize dictionary

        # Loop over all points
        for i in range(len(allPoints)):
            neighbours = set()
            # Find all potential neighbours
            for j in [(0, init_length), (0, -init_length), (init_length, 0), (-init_length, 0)]:
                potentialNeighbour = tuple(np.add(allPointsList[i], j))
                if  potentialNeighbour in allPoints:
                    neighbours.add(potentialNeighbour)

            # Creates the dictionary for x_i
            allPointsDict[allPointsList[i]] = {"pos" : allPointsList[i],"name": f"x{i}", "neighbours" : neighbours}

        return allPointsDict
